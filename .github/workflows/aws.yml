name: CI/CD Pipeline

on:
  push:
    branches:
      - server-dev
  pull_request:
    branches:
      - server-prod

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .env
      run: |
        echo -e "BACKEND_SERVICE=${{ secrets.BACKEND_SERVICE }}\nCOMPOSE_PROJECT_NAME=${{ secrets.COMPOSE_PROJECT_NAME }}" > .env

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    # Verificar la estructura del repositorio
    - name: List files
      run: ls -la

    # Instalar dependencias para el backend
    - name: Install backend dependencies
      run: npm install
      working-directory: ./app/backend  # Ruta del backend

    # Iniciar el servidor backend en segundo plano 
    - name: Start backend server 
      run: | 
        nohup npm start & sleep 20 # Esperar para asegurarse de que el servidor esté corriendo 
      working-directory: ./app/backend # Ruta del backend \
    
    # Verificar que el servidor backend esté corriendo 
    - name: Verify backend server 
      run: curl -I http://localhost:3001 
    
    # Ejecutar pruebas del backend 
    - name: Run backend tests 
      run: npm test 
      working-directory: ./app/backend # Ruta del backend

    # Instalar dependencias para el frontend
    - name: Install frontend dependencies
      run: npm install
      working-directory: ./app/frontend  # Ruta del frontend

    # Instalar navegadores de Playwright
    - name: Install Playwright browsers
      run: npx playwright install
      working-directory: ./app/frontend  # Ruta del frontend

    # Iniciar el servidor frontend en segundo plano
    - name: Start frontend server
      run: |
        nohup npm start > frontend.log 2>&1 &
        sleep 20  # Esperar para asegurarse de que el servidor esté corriendo
      working-directory: ./app/frontend  # Ruta del frontend

    # Verificar que el servidor frontend esté corriendo
    - name: Verify frontend server
      run: curl -I http://localhost:3000

    # Mostrar los logs del servidor frontend
    - name: Show frontend server logs
      run: cat ./app/frontend/frontend.log

    # Ejecutar pruebas del frontend
    - name: Run frontend tests
      run: npm test
      working-directory: ./app/frontend  # Ruta del frontend

    - name: Install Docker and Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        sudo systemctl enable --now docker

    # Construir imágenes de Docker
    - name: Build Docker image
      run: docker-compose build

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server-dev to known_hosts 
      run: ssh-keyscan -H 54.92.132.30 >> ~/.ssh/known_hosts 
    
    - name: Add server-prod to known_hosts 
      run: ssh-keyscan -H 3.89.132.144 >> ~/.ssh/known_hosts

    - name: Deploy to EC2 (server-dev)
      if: github.ref == 'refs/heads/server-dev'
      run: |
        scp .env ubuntu@54.92.132.30:/home/ubuntu/server-dev/.env
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@54.92.132.30 << 'EOF'
          sudo usermod -aG docker $USER
          sudo chmod 666 /var/run/docker.sock

          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
          # Clonar o actualizar el repositorio
          mkdir -p /home/ubuntu/server-dev
          git clone https://github.com/VictorCortez358/DevOps /home/ubuntu/server-dev || (cd /home/ubuntu/server-dev && git pull origin server-dev)

          # Copiar el archivo .env 
          cp /home/ubuntu/server-dev/.env /home/ubuntu/server-dev/.env
          
          # Levantar contenedores
          cd /home/ubuntu/server-dev
          docker-compose down
          docker-compose up -d
        EOF

    - name: Deploy to EC2 (server-prod)
      if: github.ref == 'refs/heads/server-prod'
      run: |
        scp .env ubuntu@3.89.132.144:/home/ubuntu/server-prod/.env
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@3.89.132.144 << 'EOF'
          sudo usermod -aG docker $USER
          sudo chmod 666 /var/run/docker.sock

          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
          # Clonar o actualizar el repositorio
          mkdir -p /home/ubuntu/server-prod
          git clone https://github.com/VictorCortez358/DevOps /home/ubuntu/server-prod || (cd /home/ubuntu/server-prod && git pull origin server-prod)

          # Copiar el archivo .env 
          cp /home/ubuntu/server-prod/.env /home/ubuntu/server-prod/.env
          
          # Levantar contenedores
          cd /home/ubuntu/server-prod
          docker-compose down
          docker-compose up -d
        EOF
